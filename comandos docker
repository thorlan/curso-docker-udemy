ssh -i "kanow-casa.pem" ec2-user@ec2-54-83-121-253.compute-1.amazonaws.com
https://docs.docker.com/engine/install/


docker images
docker ps -a (todos os containers)
docker ps (apenas os rodando)


docker build -t feedback-node:volumes .   (build com o nome em -t)

docker run -d -p 3000:80 --rm --name feedback-app -v feedback:/app/feedback feedback-node:volumes (roda com named volume)


docker run -d -p 3000:80 --rm --name feedback-app -v feedback:/app/feedback -v "C:\Users\12742979743\Documents\Workspace\cursos\Docker-Kubernetes\data-volumes-01-starting-setup:/app" feedback-node:volumes          roda, binda volume e binda diretorio de fora para dentro, bom para desenvolvimento


docker logs nomecontainer 


Just a quick note: If you don't always want to copy and use the full path, you can use these shortcuts:

macOS / Linux: -v $(pwd):/app

Windows: -v "%cd%":/app


RODA BINDANDO PORTA 3000 (DE FORA) COM A 80 DE DENTRO
--RM MANDA limpar o container quando parar
--name nome da imagem
-v bindando feedback de fora com /app/feedback de dentro
-v fullpath:/app  bindando o diretorio de fora com o de dentro (mudancas em tempo real)
-v /app/node_modules   criando volume anonimo para node modules de dentro (ta evitando node_modules ser substituido com o de fora  npm install ocorre antes de bindar os diretorios)
$ docker run -d -p 3000:80 --rm --name feedback-app -v feedback:/app/feedback -v "C:\Users\12742979743\Documents\Workspace\cursos\Docker-Kubernetes\data-volumes-01-starting-setup:/app" -v /app/node_modules feedback-node:volumes

docker volume inspect nomedovolume  

no comando de run posso passar variavel de ambiente chave=valor
--env PORT:8000   OU --e PORT:8000
--env-file ./.env  e dentro do arquivo PORT=8000


para pegar localhost no docker uso o host.docker.internal

docker network create nome-da-rede

docker run --network nome-da-rede nomedaimagem que ai coloco todos na mesma rede!!!!

docker network ls

dentro do codigo inves de usar localhost posso usar o nome do container rodando
para um poder ver o outro. http://psateapi:porta/path  por exemplo! DESDE QUE ESTEJAM NA MESMA REDE!


docker build -t nome .

-p portadedentro:portadefora

pra rodar um container com react, tem que entrar com -it se nao ele para!


EXECUTAR COMANDO DENTRO DO CONTAINER:
	- executar o container com -d -it
	- docker exec nomedocontainer comando
		-docker exec (-it se quiser ficar conectado) my-react-app npm init


	-docker run -it node npm init (vai executar o container e executar o npm init!)

* ler logs do interc2 docker run -it entrada-wsdl tail -F config/log.txt 


#append os comandos usados apos o docker run
#docker run -it node-util -v ${pwd}:/app install expres --save   
#(tirei o npm do inicio! vai instalar o express)
ENTRYPOINT ["npm"] no Dockerfile faz um append com os comandos passados

para passar um exec no docker compose (para usar no entrypoint do dockerfile)
docker-compose run servicename comando
docker-compose run npm init
version: "3.8"
services:
  npm:
    build: ./
    stdin_open: true
    tty: true
    volumes:
      - ./:/app

 docker-compose run nao remove o container ao parar
 docker-compose run --rm npm init   podemos passar o rm para eles tbm!





COMANDOS KUBERNETES
instalar kubectl e minikube


kubectl get services -> expoe os servicos q estao rodando no kubectl
kubectl get pods -> mostra os pods
kubectl scale -> quantas instancias (pods) eu quero do cara
	kubectl scale deployment/first-app --replicas=3  (o trafego é distribuido automaticamente, é invisivel para usuarios!)



minikube service first-app    -> faz o minikube "servir nosso app que demos o deplyoment no kubectl"

minikube start --driver=hyperv  (hyperv, virtualbox, docker etc)
ou tentar somente o minikube start (se ja tiver sido configurado e nao quiser o delete)
dando problema? minikube delete
minikube dashboard

change code e update um deployment
	rebuild docker image:  docker build -t repositorio/imagem:TAG .
	kubectl get deployments (para ver os deployments)
	docker push repo/imagem
	kubectl set image deployment/nomedodeployment nomedaimagem=nomedanovaimagem (set imagem para deployment/nome, nome da imagem pega no dashboard do kube)
	NOVA IMAGENS SAO BAIXADAS SO SE TIVEREM NOVO TAG!
	kubectl get deployments


inspecionar rollout 
	kubectl rollout status deployment/meu-app
	kubectl get pods -> observar o nome e ver os que estao dando merda!
	kubectl rollout undo deployment/meu-app  (ele faz um undo no ultimo deployment)

	kubectl rollout history deployment/meu-app   (pego o historico de versoes dos deployment! PEGAR O REVISION NUMBER)
	kubectl roloout undo deployment/meu-app --to-revision=NUMERO_REVISAO

	kubectl delete service nome
	kubectl delete deployment nome

OUTRA FORMA DE FAZER ISSO TUDO!
	kubectl apply -f config.yml   nosso "docker-compose!"

kubectl apply -f=filename.yaml (roda o yaml file!)
kubectl apply -f=serviceFilename.yaml  (para criar o servico)
minikube service backend (nome dentro do service name!)
kubectl delete -f=deployment.yaml -f=servicename.yaml  deleta tudo relacionado a ele (nAO APAGA O FILE)

